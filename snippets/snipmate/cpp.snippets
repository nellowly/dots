snippet binpow
	template<typename T>
	T binpow(T n, T k) {
		T ans = 1;
		while (k > 0) {
			if (k & 1) ans = (1ll * ans * n) % mod;
			n = (1ll * n * n) % mod;
			k >>= 1;
		}
		return ans;
	}
snippet realpow
	ll binpow(ll n, ll k) {
		ll ans = 1;
		while (k > 0) {
			if (k & 1) ans *= n;
			n *= n;
			k >>= 1;
		}
		return ans;
	}
snippet indexed_set
	#include <ext/pb_ds/assoc_container.hpp>
	#include <ext/pb_ds/tree_policy.hpp>
	#include <ext/pb_ds/detail/standard_policies.hpp>
	using namespace __gnu_pbds;
	typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;
	typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update> indexed_multiset;
snippet magic
	#pragma GCC optimize("Ofast,unroll-loops")
	#pragma GCC target("avx,avx2,sse,sse2")
autosnippet ;n
	#include <bits/stdc++.h>
	using namespace std;
	using ll = long long;

	int32_t main() {
		cin.tie(0)->sync_with_stdio(0);
		$0
	}
autosnippet ;m
	#include <bits/stdc++.h>
	using namespace std;
	using ll = long long;

	void solve() {
		$0
	}

	int32_t main() {
		cin.tie(0)->sync_with_stdio(0);
		int t = 1;
		cin >> t;
		while (t--) {
			solve();
			if (t) cout << '\n';
		}
	}
